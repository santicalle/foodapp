swagger: '2.0'
info:
  description: API Documentation
  version: 1.0.0
  title: FoodPhone.menu
host: 'localhost:8080'
basePath: /api
tags:
  - name: category
    description: Product Categories
  - name: rol
    description: User Roles
  - name: menuCategory
    description: Menu Categories
  - name: company
    description: Food Companies
schemes:
  - http
paths:

#category
  /category/all:
    get:
      tags:
        - category
      summary: Get all categories
      description: ""
      operationId: getAllCategories
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
  /category:
    post:
      tags:
        - category
      summary: Create new category
      description: ""
      operationId: createCategory
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: new category
          required: false
          schema:
            $ref: "#/definitions/Category"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Category"
        "400":
          description: Invalid Category
  /category/{categoryId}:
    get:
      tags:
        - category
      summary: Get specific category
      description: ""
      operationId: getCategoryById
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: ID of category
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found
    put:
      tags:
        - category
      summary: Update an existing category
      description: ""
      operationId: updateCategory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: ID of category
          required: true
          type: string
        - in: body
          name: body
          description: Update category
          required: false
          schema:
            $ref: "#/definitions/Category"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Category not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - category
      summary: Delete category by ID
      description: ""
      operationId: deleteCategory
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Invalid ID supplied
        '404':
          description: Category not found

#rol
  /rol/all:
    get:
      tags:
        - rol
      summary: Get all roles
      description: ""
      operationId: getAllRoles
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Rol'
        '400':
          description: Invalid ID supplied
        '404':
          description: Rol not found
  /rol:
    post:
      tags:
        - rol
      summary: Create new rol
      description: ""
      operationId: createRol
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: new rol
          required: false
          schema:
            $ref: "#/definitions/Rol"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Rol"
        "400":
          description: Invalid Rol
  /rol/{rolId}:
    get:
      tags:
        - rol
      summary: Get specific rol
      description: ""
      operationId: getRolById
      produces:
        - application/json
      parameters:
        - name: rolId
          in: path
          description: ID of rol
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Rol'
        '400':
          description: Invalid ID supplied
        '404':
          description: Rol not found
    put:
      tags:
        - rol
      summary: Update an existing rol
      description: ""
      operationId: updateRol
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: rolId
          in: path
          description: ID of rol
          required: true
          type: string
        - in: body
          name: body
          description: Update rol
          required: false
          schema:
            $ref: "#/definitions/Rol"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Rol not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - rol
      summary: Delete rol by ID
      description: ""
      operationId: deleteRol
      produces:
        - application/json
      parameters:
        - name: rolId
          in: path
          description: ID of the rol to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Rol'
        '400':
          description: Invalid ID supplied
        '404':
          description: Rol not found
          
#menuCategory
  /menuCategory/all:
    get:
      tags:
        - menuCategory
      summary: Get all menuCategories
      description: ""
      operationId: getAllMenuCategories
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/MenuCategory'
        '400':
          description: Invalid ID supplied
        '404':
          description: MenuCategory not found
  /menuCategory:
    post:
      tags:
        - menuCategory
      summary: Create new menuCategory
      description: ""
      operationId: createMenuCategory
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: new menuCategory
          required: false
          schema:
            $ref: "#/definitions/MenuCategory"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/MenuCategory"
        "400":
          description: Invalid MenuCategory
  /menuCategory/{menuCategoryId}:
    get:
      tags:
        - menuCategory
      summary: Get specific menuCategory
      description: ""
      operationId: getMenuCategoryById
      produces:
        - application/json
      parameters:
        - name: menuCategoryId
          in: path
          description: ID of menuCategory
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/MenuCategory'
        '400':
          description: Invalid ID supplied
        '404':
          description: MenuCategory not found
    put:
      tags:
        - menuCategory
      summary: Update an existing menuCategory
      description: ""
      operationId: updateMenuCategory
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: menuCategoryId
          in: path
          description: ID of menuCategory
          required: true
          type: string
        - in: body
          name: body
          description: Update menuCategory
          required: false
          schema:
            $ref: "#/definitions/MenuCategory"
      responses:
        "405":
          description: Validation exception
        "404":
          description: MenuCategory not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - menuCategory
      summary: Delete menuCategory by ID
      description: ""
      operationId: deleteMenuCategory
      produces:
        - application/json
      parameters:
        - name: menuCategoryId
          in: path
          description: ID of the menuCategory to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/MenuCategory'
        '400':
          description: Invalid ID supplied
        '404':
          description: MenuCategory not found
          
#company
  /company/all:
    get:
      tags:
        - company
      summary: Get all companies
      description: ""
      operationId: getAllCompanies
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Company'
        '400':
          description: Invalid ID supplied
        '404':
          description: Company not found
  /company:
    post:
      tags:
        - company
      summary: Create new company
      description: ""
      operationId: createCompany
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: new company
          required: false
          schema:
            $ref: "#/definitions/Company"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Company"
        "400":
          description: Invalid Company
  /company/{companyId}:
    get:
      tags:
        - company
      summary: Get specific company
      description: ""
      operationId: getCompanyById
      produces:
        - application/json
      parameters:
        - name: companyId
          in: path
          description: ID of company
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Company'
        '400':
          description: Invalid ID supplied
        '404':
          description: Company not found
    put:
      tags:
        - company
      summary: Update an existing company
      description: ""
      operationId: updateCompany
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: companyId
          in: path
          description: ID of company
          required: true
          type: string
        - in: body
          name: body
          description: Update company
          required: false
          schema:
            $ref: "#/definitions/Company"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Company not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - company
      summary: Delete company by ID
      description: ""
      operationId: deleteCompany
      produces:
        - application/json
      parameters:
        - name: companyId
          in: path
          description: ID of the company to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Company'
        '400':
          description: Invalid ID supplied
        '404':
          description: Company not found

#user
  /user/all:
    get:
      tags:
        - user
      summary: Get all users
      description: ""
      operationId: getAllUsers
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
  /user:
    post:
      tags:
        - user
      summary: Create new user
      description: ""
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New User
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid User
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get specific user
      description: ""
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of User
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update an existing user
      description: ""
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          type: string
        - in: body
          name: body
          description: Update User
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "405":
          description: Validation exception
        "404":
          description: User not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - user
      summary: Delete user by ID
      description: ""
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: ID of the User to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found

#questionType
  /questionType/all:
    get:
      tags:
        - questionType
      summary: Get all QuestionTypes
      description: ""
      operationId: getAllQuestionTypes
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/QuestionType'
        '400':
          description: Invalid ID supplied
        '404':
          description: QuestionType not found
  /questionType:
    post:
      tags:
        - questionType
      summary: Create new QuestionType
      description: ""
      operationId: createQuestionType
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New QuestionType
          required: false
          schema:
            $ref: "#/definitions/QuestionType"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/QuestionType"
        "400":
          description: Invalid QuestionType
  /questionType/{questionTypeId}:
    get:
      tags:
        - questionType
      summary: Get specific QuestionType
      description: ""
      operationId: getQuestionTypeById
      produces:
        - application/json
      parameters:
        - name: questionTypeId
          in: path
          description: ID of QuestionType
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/QuestionType'
        '400':
          description: Invalid ID supplied
        '404':
          description: QuestionType not found
    put:
      tags:
        - questionType
      summary: Update an existing QuestionType
      description: ""
      operationId: updateQuestionType
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: questionTypeId
          in: path
          description: ID of questionType
          required: true
          type: string
        - in: body
          name: body
          description: Update QuestionType
          required: false
          schema:
            $ref: "#/definitions/QuestionType"
      responses:
        "405":
          description: Validation exception
        "404":
          description: QuestionType not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - questionType
      summary: Delete QuestionType by ID
      description: ""
      operationId: deleteQuestionType
      produces:
        - application/json
      parameters:
        - name: questionTypeId
          in: path
          description: ID of the QuestionType to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/QuestionType'
        '400':
          description: Invalid ID supplied
        '404':
          description: QuestionType not found

#parameter
  /parameter/all:
    get:
      tags:
        - parameter
      summary: Get all Parameters
      description: ""
      operationId: getAllParameters
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Parameter'
        '400':
          description: Invalid ID supplied
        '404':
          description: Parameter not found
  /parameter:
    post:
      tags:
        - parameter
      summary: Create new Parameter
      description: ""
      operationId: createParameter
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New Parameter
          required: false
          schema:
            $ref: "#/definitions/Parameter"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Parameter"
        "400":
          description: Invalid Parameter
  /parameter/{parameterId}:
    get:
      tags:
        - parameter
      summary: Get specific Parameter
      description: ""
      operationId: getParameterById
      produces:
        - application/json
      parameters:
        - name: parameterId
          in: path
          description: ID of Parameter
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Parameter'
        '400':
          description: Invalid ID supplied
        '404':
          description: Parameter not found
    put:
      tags:
        - parameter
      summary: Update an existing Parameter
      description: ""
      operationId: updateParameter
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: parameterId
          in: path
          description: ID of parameter
          required: true
          type: string
        - in: body
          name: body
          description: Update Parameter
          required: false
          schema:
            $ref: "#/definitions/Parameter"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Parameter not found
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - parameter
      summary: Delete Parameter by ID
      description: ""
      operationId: deleteParameter
      produces:
        - application/json
      parameters:
        - name: parameterId
          in: path
          description: ID of the Parameter to be deleted
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Parameter'
        '400':
          description: Invalid ID supplied
        '404':
          description: Parameter not found

definitions:

#category
  Category:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      isActive:
        type: boolean

#rol
  Rol:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      isActive:
        type: boolean

#menuCategory
  MenuCategory:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      isActive:
        type: boolean

#company
  Company:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      details:
        type: string
      categories:
        type: array
        items:
          type: string
      isDelivery:
        type: boolean
      isCash:
        type: boolean
      isCreditCard:
        type: boolean
      isActive:
        type: boolean
      isOpenNow:
        type: boolean
      timetable:
        type: array
        items:
          $ref: "#/definitions/CompanyTimeTable"
  CompanyTimeTable:
    type: object
    properties:
      day:
        type: string
      open:
        type: string
      close:
        type: string
      isClose:
        type: boolean

#user
  User:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      roles:
        type: array
        items:
          type: string
      addresses:
        type: array
        items:
          $ref: "#/definitions/Addresses"
      phones:
        type: array
        items:
          $ref: "#/definitions/Phones"
  Addresses:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
      details:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      isActive:
        type: boolean
  Phones:
    type: object
    properties:
      name:
        type: string
      number:
        type: string      
      isActive:
        type: boolean

#parameters
  Parameter:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      value:
        type: string
      isActive:
        type: boolean
      details:
        type: array
        items:
          $ref: "#/definitions/ParameterDetails"
  ParameterDetails:
    type: object
    properties:
      name:
        type: string
      details:
        type: string
      numberId:
        type: number
      value:        
        type: string
      order:
        type: number
      isActive:
        type: boolean

#questionType
  QuestionType:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      numberId:
        type: number
      isActive:
        type: boolean